https://www.geeksforgeeks.org/union-and-intersection-of-two-sorted-arrays-2/   
   SEE WITH DUPLICATES ALSO..4 CODES
   
   1) Use two index variables i and j, initial values i = 0, j = 0 
    2) If arr1[i] is smaller than arr2[j] then print arr1[i] and increment i. 
    3) If arr1[i] is greater than arr2[j] then print arr2[j] and increment j. 
    4) If both are same then print any of them and increment both i and j. 
    5) Print remaining elements of the larger array.

 
 
 

Below is the implementation of the above approach : 
 

// Java program to find union of
// two sorted arrays
 
class FindUnion {
    /* Function prints union of arr1[] and arr2[]
    m is the number of elements in arr1[]
    n is the number of elements in arr2[] */
    static int printUnion(int arr1[], int arr2[], int m, int n)
    {
        int i = 0, j = 0;
        while (i < m && j < n) {
            if (arr1[i] < arr2[j])
                System.out.print(arr1[i++] + " ");
            else if (arr2[j] < arr1[i])
                System.out.print(arr2[j++] + " ");
            else {
                System.out.print(arr2[j++] + " ");
                i++;
            }
        }
 
        /* Print remaining elements of
         the larger array */
        while (i < m)
            System.out.print(arr1[i++] + " ");
        while (j < n)
            System.out.print(arr2[j++] + " ");
 
        return 0;
    }
 
    public static void main(String args[])
    {
        int arr1[] = { 1, 2, 4, 5, 6 };
        int arr2[] = { 2, 3, 5, 7 };
        int m = arr1.length;
        int n = arr2.length;
        printUnion(arr1, arr2, m, n);
    }
}

Output: 
 

1 2 3 4 5 6 7 

Time Complexity : O(m + n)
Handling duplicates in any of the array : Above code does not handle duplicates in any of the array. To handle the duplicates, just check for every element whether adjacent elements are equal. 
Below is the implementation of this approach. 
 

// Java program to find union of two
// sorted arrays (Handling Duplicates)
class FindUnion {
 
    static void UnionArray(int arr1[],
                           int arr2[])
    {
        // Taking max element present in either array
        int m = arr1[arr1.length - 1];
        int n = arr2[arr2.length - 1];
 
        int ans = 0;
 
        if (m > n) {
            ans = m;
        }
        else
            ans = n;
 
        // Finding elements from 1st array
        // (non duplicates only). Using
        // another array for storing union
        // elements of both arrays
        // Assuming max element present
        // in array is not more than 10^7
        int newtable[] = new int[ans + 1];
 
        // First element is always
        // present in final answer
        System.out.print(arr1[0] + " ");
 
        // Incrementing the First element's count
        // in it's corresponding index in newtable
        ++newtable[arr1[0]];
 
        // Starting traversing the first
        // array from 1st index till last
        for (int i = 1; i < arr1.length; i++) {
            // Checking whether current element
            // is not equal to it's previous element
            if (arr1[i] != arr1[i - 1]) {
                System.out.print(arr1[i] + " ");
                ++newtable[arr1[i]];
            }
        }
 
        // Finding only non common
        // elements from 2nd array
        for (int j = 0; j < arr2.length; j++) {
            // By checking whether it's already
            // present in newtable or not
            if (newtable[arr2[j]] == 0) {
                System.out.print(arr2[j] + " ");
                ++newtable[arr2[j]];
            }
        }
    }
 
    // Driver Code
    public static void main(String args[])
    {
        int arr1[] = { 1, 2, 2, 2, 3 };
        int arr2[] = { 2, 3, 4, 5 };
 
        UnionArray(arr1, arr2);
    }
}

Thanks to Rajat Rawat for suggesting this solution.
 

Intersection of arrays arr1[] and arr2[]

To find intersection of 2 sorted arrays, follow the below approach : 
 


    1) Use two index variables i and j, initial values i = 0, j = 0 
    2) If arr1[i] is smaller than arr2[j] then increment i. 
    3) If arr1[i] is greater than arr2[j] then increment j. 
    4) If both are same then print any of them and increment both i and j.

Below is the implementation of the above approach :
 

// Java program to find intersection of
// two sorted arrays
 
class FindIntersection {
    /* Function prints Intersection of arr1[] and arr2[]
       m is the number of elements in arr1[]
       n is the number of elements in arr2[] */
    static void printIntersection(int arr1[], int arr2[], int m, int n)
    {
        int i = 0, j = 0;
        while (i < m && j < n) {
            if (arr1[i] < arr2[j])
                i++;
            else if (arr2[j] < arr1[i])
                j++;
            else {
                System.out.print(arr2[j++] + " ");
                i++;
            }
        }
    }
 
    public static void main(String args[])
    {
        int arr1[] = { 1, 2, 4, 5, 6 };
        int arr2[] = { 2, 3, 5, 7 };
        int m = arr1.length;
        int n = arr2.length;
        printIntersection(arr1, arr2, m, n);
    }
}

Output: 
 

2 5

Time Complexity : O(m + n)

Handling duplicate in Arrays :
Above code does not handle duplicate elements in arrays. The intersection should not count duplicate elements. To handle duplicates just check whether current element is already present in intersection list. Below is the implementation of this approach.

# Python3 program to find Intersection of two
# Sorted Arrays (Handling Duplicates)
def IntersectionArray(a, b, n, m):
    '''
    :param a: given sorted array a
    :param n: size of sorted array a
    :param b: given sorted array b
    :param m: size of sorted array b
    :return: array of intersection of two array or -1
    '''
 
    Intersection = []
    i = j = 0
     
    while i < n and j < m:
        if a[i] == b[j]:
 
            # If duplicate already present in Intersection list
            if len(Intersection) > 0 and Intersection[-1] == a[i]:
                i+= 1
                j+= 1
 
            # If no duplicate is present in Intersection list
            else:
                Intersection.append(a[i])
                i+= 1
                j+= 1
        elif a[i] < b[j]:
            i+= 1
        else:
            j+= 1
             
    if not len(Intersection):
        return [-1]
    return Intersection
 
# Driver Code
if __name__ == "__main__":
 
    arr1 = [1, 2, 2, 3, 4]
    arr2 = [2, 2, 4, 6, 7, 8]
     
    l = IntersectionArray(arr1, arr2, len(arr1), len(arr2))
    print(*l)
 
# This code is contributed by Abhishek Kumar

Output: 
 

2 4

Time Complexity : O(m + n) 
Auxiliary Space : O(min(m, n))
Another approach that is useful when difference between sizes of two given arrays is significant. 
The idea is to iterate through the shorter array and do a binary search for every element of short array in big array (note that arrays are sorted). Time complexity of this solution is O(min(mLogn, nLogm)). This solution works better than the above approach when ratio of larger length to smaller is more than logarithmic order.
