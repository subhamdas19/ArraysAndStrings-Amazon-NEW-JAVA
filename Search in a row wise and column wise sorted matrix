https://www.geeksforgeeks.org/search-in-row-wise-and-column-wise-sorted-matrix/
Efficient Solution 

    Approach: The simple idea is to remove a row or column in each comparison until an element is found. Start searching from the top-right corner of the matrix. There are three possible cases. 
        The given number is greater than the current number: This will ensure that all the elements in the current row are smaller than the given number as the pointer is already at the right-most elements and the row is sorted. Thus, the entire row gets eliminated and continues the search for the next row. Here, elimination means that a row needs not be searched.
        The given number is smaller than the current number: This will ensure that all the elements in the current column are greater than the given number. Thus, the entire column gets eliminated and continues the search for the previous column, i.e. the column on the immediate left.
        The given number is equal to the current number: This will end the search.
    Algorithm: 
        Let the given element be x, create two variable i = 0, j = n-1 as index of row and column
        Run a loop until i = 0
        Check if the current element is greater than x then decrease the count of j. Exclude the current column.
        Check if the current element is less than x then increase the count of i. Exclude the current row.
        If the element is equal, then print the position and end.
    Thanks to devendraiiit for suggesting the approach below.
    Implementation:

// JAVA Code for Search in a row wise and
// column wise sorted matrix
 
class GFG {
 
    /* Searches the element x in mat[][]. If the
    element is found, then prints its position
    and returns true, otherwise prints "not found"
    and returns false */
    private static void search(int[][] mat,
                                    int n, int x)
    {
         
        // set indexes for top right
        int i = 0, j = n - 1;
        // element
 
        while (i < n && j >= 0)
        {
            if (mat[i][j] == x)
            {
                System.out.print("n Found at " +
                                    i + " " + j);
                return;
            }
            if (mat[i][j] > x)
                j--;
            else // if mat[i][j] < x
                i++;
        }
 
        System.out.print("n Element not found");
        return; // if ( i==n || j== -1 )
    }
    // driver program to test above function
    public static void main(String[] args)
    {
        int mat[][] = { { 10, 20, 30, 40 },
                        { 15, 25, 35, 45 },
                        { 27, 29, 37, 48 },
                        { 32, 33, 39, 50 } };
 
        search(mat, 4, 29);
    }
}
// This code is contributed by Arnav Kr. Mandal.
Output

n Found at 2, 1

Time Complexity: O(n). 
Only one traversal is needed, i.e, i from 0 to n and j from n-1 to 0 with at most 2*n steps. 
The above approach will also work for m x n matrix (not only for n x n). Complexity would be O(m + n). 
Space Complexity: O(1). 
No extra space is required.
