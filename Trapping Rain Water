https://www.geeksforgeeks.org/trapping-rain-water/

https://www.youtube.com/watch?v=C8UjlJZsHBw

Method 2: This is an efficient solution to the above problem.

    Approach: In the previous solution, to find the highest bar on the left and right, array traversal is needed which reduces the efficiency of the solution. To make this efficient one must pre-compute the highest bar on the left and right of every bar in linear time. Then use these pre-computed values to find the amount of water in every array element.
    Algorithm: 
        Create two arrays left and right of size n. create a variable max_ = INT_MIN.
        Run one loop from start to end. In each iteration update max_ as max_ = max(max_, arr[i]) and also assign left[i] = max_
        Update max_ = INT_MIN.
        Run another loop from end to start. In each iteration update max_ as max_ = max(max_, arr[i]) and also assign right[i] = max_
        Traverse the array from start to end.
        The amount of water that will be stored in this column is min(a,b) – array[i],(where a = left[i] and b = right[i]) add this value to total amount of water stored
        Print the total amount of water stored.
    Implementation:

// Java program to find maximum amount of water that can
// be trapped within given set of bars.
 
class Test {
    static int arr[] = new int[] { 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 };
 
    // Method for maximum amount of water
    static int findWater(int n)
    {
        // left[i] contains height of tallest bar to the
        // left of i'th bar including itself
        int left[] = new int[n];
 
        // Right [i] contains height of tallest bar to
        // the right of ith bar including itself
        int right[] = new int[n];
 
        // Initialize result
        int water = 0;
 
        // Fill left array
        left[0] = arr[0];
        for (int i = 1; i < n; i++)
            left[i] = Math.max(left[i - 1], arr[i]);
 
        // Fill right array
        right[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--)
            right[i] = Math.max(right[i + 1], arr[i]);
 
        // Calculate the accumulated water element by element
        // consider the amount of water on i'th bar, the
        // amount of water accumulated on this particular
        // bar will be equal to min(left[i], right[i]) - arr[i] .
        for (int i = 0; i < n; i++)
            water += Math.min(left[i], right[i]) - arr[i];
 
        return water;
    }
 
    // Driver method to test the above function
    public static void main(String[] args)
    {
 
        System.out.println("Maximum water that can be accumulated is " + findWater(arr.length));
    }
}

Output: 


Maximum water that can be accumulated is 6

    Complexity Analysis: 
        Time Complexity: O(n). 
        Only one traversal of the array is needed, So time Complexity is O(n).
        Space Complexity: O(n). 
        Two extra arrays are needed each of size n.

Space Optimization for the above Solution: 

Instead of maintaining two arrays of size n for storing the left and a right max of each element, maintain two variables to store the maximum till that point. Since water trapped at any element = min(max_left, max_right) – arr[i]. Calculate water trapped on smaller elements out of A[lo] and A[hi] first and move the pointers till lo doesn’t cross hi.

    Implementation:

// JAVA Code For Trapping Rain Water
import java.util.*;
 
class GFG {
 
    static int findWater(int arr[], int n)
    {
        // initialize output
        int result = 0;
 
        // maximum element on left and right
        int left_max = 0, right_max = 0;
 
        // indices to traverse the array
        int lo = 0, hi = n - 1;
 
        while (lo <= hi) {
            if (arr[lo] < arr[hi]) {
                if (arr[lo] > left_max)
 
                    // update max in left
                    left_max = arr[lo];
                else
 
                    // water on curr element =
                    // max - curr
                    result += left_max - arr[lo];
                lo++;
            }
            else {
                if (arr[hi] > right_max)
 
                    // update right maximum
                    right_max = arr[hi];
 
                else
                    result += right_max - arr[hi];
                hi--;
            }
        }
 
        return result;
    }
 
    /* Driver program to test above function */
    public static void main(String[] args)
    {
        int arr[] = { 0, 1, 0, 2, 1, 0, 1,
                      3, 2, 1, 2, 1 };
        int n = arr.length;
 
        System.out.println("Maximum water that "
                           + "can be accumulated is "
                           + findWater(arr, n));
    }
}
// This code is contributed by Arnav Kr. Mandal.

Output: 

Maximum water that can be accumulated is 6

    Complexity Analysis: 
        Time Complexity: O(n). 
        Only one traversal of the array is needed.
        Auxiliary Space: O(1). 
        As no extra space is required.
    Thanks to Gaurav Ahirwar and Aditi Sharma for the above solution. 
     

