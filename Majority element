https://www.geeksforgeeks.org/majority-element/
METHOD 3 (Using Moore’s Voting Algorithm):   

    Approach: This is a two-step process. 
        The first step gives the element that maybe the majority element in the array. If there is a majority element in an array, then this step will definitely return majority element, otherwise, it will return candidate for majority element.
        Check if the element obtained from the above step is majority element. This step is necessary as there might be no majority element.
         
    Algorithm: 
        Loop through each element and maintains a count of majority element, and a majority index, maj_index
        If the next element is same then increment the count if the next element is not same then decrement the count.
        if the count reaches 0 then changes the maj_index to the current element and set the count again to 1.
        Now again traverse through the array and find the count of majority element found.
        If the count is greater than half the size of the array, print the element
        Else print that there is no majority element

Below is the implementation of above idea: 

/* Program for finding out majority element in an array */
 
class MajorityElement {
    /* Function to print Majority Element */
    void printMajority(int a[], int size)
    {
        /* Find the candidate for Majority*/
        int cand = findCandidate(a, size);
 
        /* Print the candidate if it is Majority*/
        if (isMajority(a, size, cand))
            System.out.println(" " + cand + " ");
        else
            System.out.println("No Majority Element");
    }
 
    /* Function to find the candidate for Majority */
    int findCandidate(int a[], int size)
    {
        int maj_index = 0, count = 1;
        int i;
        for (i = 1; i < size; i++) {
            if (a[maj_index] == a[i])
                count++;
            else
                count--;
            if (count == 0) {
                maj_index = i;
                count = 1;
            }
        }
        return a[maj_index];
    }
 
    /* Function to check if the candidate occurs more
       than n/2 times */
    boolean isMajority(int a[], int size, int cand)
    {
        int i, count = 0;
        for (i = 0; i < size; i++) {
            if (a[i] == cand)
                count++;
        }
        if (count > size / 2)
            return true;
        else
            return false;
    }
 
    /* Driver code */
    public static void main(String[] args)
    {
        MajorityElement majorelement
            = new MajorityElement();
        int a[] = new int[] { 1, 3, 3, 1, 2 };
       
        // Function call
        int size = a.length;
        majorelement.printMajority(a, size);
    }
}
 
// This code has been contributed by Mayank Jaiswal
Output

No Majority Element

Complexity Analysis: 

    Time Complexity: O(n). 
    As two traversal of the array is needed, so the time complexity is linear.
    Auxiliary Space: O(1). 
    As no extra space is required.

  METHOD 4 (Using Hashmap): 

    Approach: This method is somewhat similar to Moore voting algorithm in terms of time complexity, but in this case, there is no need for the second step of Moore voting algorithm. But as usual, here space complexity becomes O(n). 
    In Hashmap(key-value pair), at value, maintain a count for each element(key) and whenever the count is greater than half of the array length, return that key(majority element). 
     
    Algorithm:
        Create a hashmap to store a key-value pair, i.e. element-frequency pair.
        Traverse the array from start to end.
        For every element in the array, insert the element in the hashmap if the element does not exist as key, else fetch the value of the key ( array[i] ), and increase the value by 1
        If the count is greater than half then print the majority element and break.
        If no majority element is found print “No Majority element”

Below is the implementation of above idea:

import java.util.HashMap;
 
/* Program for finding out majority element in an array */
  
class MajorityElement
{
    private static void findMajority(int[] arr)
    {
        HashMap<Integer,Integer> map = new HashMap<Integer, Integer>();
 
        for(int i = 0; i < arr.length; i++) {
            if (map.containsKey(arr[i])) {
                    int count = map.get(arr[i]) +1;
                    if (count > arr.length /2) {
                        System.out.println("Majority found :- " + arr[i]);
                        return;
                    } else
                        map.put(arr[i], count);
 
            }
            else
                map.put(arr[i],1);
            }
            System.out.println(" No Majority element");
    }
 
  
    /* Driver program to test the above functions */
    public static void main(String[] args)
    {
        int a[] = new int[]{2,2,2,2,5,5,2,3,3};
         
        findMajority(a);
    }
}
// This code is contributed by  karan malhotra
Output

Majority found :- 2

Complexity Analysis: 

    Time Complexity: O(n). 
    One traversal of the array is needed, so the time complexity is linear.
    Auxiliary Space: O(n). 
    Since a hashmap requires linear space.

Thanks, Ashwani Tanwar, Karan Malhotra for suggesting this.
