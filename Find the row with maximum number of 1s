https://www.geeksforgeeks.org/find-the-row-with-maximum-number-1s/

We can do better. Since each row is sorted, we can use Binary Search to count of 1s in each row. We find the index of first instance of 1 in each row. The count of 1s will be equal to total number of columns minus the index of first 1.

See the following code for implementation of the above approach.  


// Java program to find the row
// with maximum number of 1s
import java.io.*;
  
class GFG {
    static int R = 4, C = 4;
    // Function to find the index of first index
    // of 1 in a boolean array arr[] 
    static int first(int arr[], int low, int high)
    {
        if (high >= low) {
            // Get the middle index
            int mid = low + (high - low) / 2;
  
            // Check if the element at middle index is first 1
            if ((mid == 0 || (arr[mid - 1] == 0)) && arr[mid] == 1)
                return mid;
  
            // If the element is 0, recur for right side
            else if (arr[mid] == 0)
                return first(arr, (mid + 1), high);
                  
            // If element is not first 1, recur for left side
            else 
                return first(arr, low, (mid - 1));
        }
        return -1;
    }
  
    // Function that returns index of row
    // with maximum number of 1s.
    static int rowWithMax1s(int mat[][])
    {
        // Initialize max values
        int max_row_index = 0, max = -1; 
  
        // Traverse for each row and count number of 
        // 1s by finding the index of first 1
        int i, index;
        for (i = 0; i < R; i++) {
            index = first(mat[i], 0, C - 1);
            if (index != -1 && C - index > max) {
                max = C - index;
                max_row_index = i;
            }
        }
  
        return max_row_index;
    }
    // Driver Code
    public static void main(String[] args)
    {
        int mat[][] = { { 0, 0, 0, 1 },
                        { 0, 1, 1, 1 },
                        { 1, 1, 1, 1 },
                        { 0, 0, 0, 0 } };
        System.out.println("Index of row with maximum 1s is "
                                            + rowWithMax1s(mat));
    }
}
  
// This code is contributed by 'Gitanjali'.
Output

Index of row with maximum 1s is 2

Time Complexity: O(mLogn) where m is number of rows and n is number of columns in matrix.
The above solution can be optimized further. Instead of doing binary search in every row, we first check whether the row has more 1s than max so far. If the row has more 1s, then only count 1s in the row. Also, to count 1s in a row, we donâ€™t do binary search in complete row, we do search in before the index of last max. 

Following is an optimized version of the above solution.  

public class gfg
{
  // The main function that returns index 
  // of row with maximum number of 1s.  
  static int rowWithMax1s(boolean mat[][])  
  {  
    int i, index;  
  
    // Initialize max using values from first row.  
    int max_row_index = 0;  
    int max = first(mat[0], 0, C - 1);  
  
    // Traverse for each row and count number of 1s  
    // by finding the index of first 1  
    for (i = 1; i < R; i++)  
    {
  
      // Count 1s in this row only if this row  
      // has more 1s than max so far  
  
      // Count 1s in this row only if this row  
      // has more 1s than max so far  
      if (max != -1 && mat[i][C - max - 1] == 1)  
      {  
        // Note the optimization here also  
        index = first (mat[i], 0, C - max);  
  
        if (index != -1 && C - index > max)  
        {  
          max = C - index;  
          max_row_index = i;  
        }  
      }  
      else
      {  
        max = first(mat[i], 0, C - 1);  
      }  
    }  
    return max_row_index;  
  }
}
  
// This code is contributed by divyesh072019.

The worst case time complexity of the above optimized version is also O(mLogn), the will 
