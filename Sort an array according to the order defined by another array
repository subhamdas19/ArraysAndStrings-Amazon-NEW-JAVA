https://www.faceprep.in/sort-an-array-according-to-the-order-defined-by-another-array/
BOTH THE METHODS


Program to Sort an array according to the order defined by another array is discussed here. Given two arrays A [] and B [], sort A in such a way that the relative order among the elements will be the same as those are in B. The elements in array A has to be printed according to the sequence of order of elements specified in array B, the rest of the elements, remaining in array A are printed at the end.


Solution to this problem can be provided in two different ways


Method 1: Traverse array 2 elements and check if those elements are found in array 1. Perform a binary search to find the elements. If array 2 elements are found in array 1, print them. Print all the remaining elements from array 1 at the end.


Method 2: Store all the array 1 elements in a hashmap. Then, traverse array 2 and check if the element is present in the map. If present, print the element k number of times where k is the frequency of appearance of the element. Then, print the remaining elements of array 1.


For example,

Array A [] = {3, 6, 13, 3, 9, 10, 14, 6, 9, 13}

Array B[] = {6, 3, 9, 13, 10}

Output: {6, 6, 3, 3, 9, 9, 13, 13, 10, 14}


Algorithm to sort an array according to the order defined by another array


    Input both the arrays, arr 1 and arr 2.
    Traverse the elements of arr 2 from i = 1 to length(arr 2).
    Check if arr 1 contains the ith element of arr 2 (Binary search)
    Print all the ith elements.
    Go to step 2 until all the elements of arr 2 have been traversed.
    If there are any remaining elements in arr 1, print them.


Program to sort an array according to the order defined by another array is given below.


C++
Java
Python 3

44

for (int i = 0; i < n; i++)

45

{

46

​

47

int f = first(temp, 0, m-1, arr2[i], m);

48

​

49

// If not present, no need to proceed

50

if (f == -1) continue;

51

​

52

// Copy all occurrences of arr2[i] to arr1[]

53

for (int j = f; (j < m && temp[j] == arr2[i]);

54

j++)

55

{

56

arr1[ind++] = temp[j];

57

visited[j] = 1;

58

}

59

}

60

​

61

for (int i = 0; i < m; i++)

62

if (visited[i] == 0)

63

arr1[ind++] = temp[i];

64

}

65

​

66

// Function to print an array

67

static void print_array(int arr[], int n)

68

{

69

for (int i = 0; i < n; i++)

70

System.out.print(arr[i] + ” “);

71

System.out.println();

72

}

73

​

74

public static void main(String args[])

75

{

76

int arr1[] = {1, 2, 3, 4, 3, 2, 4, 2, 5};

77

int arr2[] = {4, 2, 1, 3};

78

int m = arr1.length;

79

int n = arr2.length;

80

System.out.print(“The Sorted array : “);

81

sort_according(arr1, arr2, m, n);

82

print_array(arr1, m);

83

}

84

}


Output
Enter the size of array 1 : 8
Enter the size of array 2 : 3
Input the array 1 elements : 1 2 3 4 1 2 3 9
Input the array 2 elements : 1 2 3
The Sorted array : 1 1 2 2 3 3 4 9


Time complexity: O(mLogm + nLogm)


Algorithm to sort an array according to the order specified by another array using hashing


    Input the array 1 and array 2 elements.
    Count the frequency of all the elements of array 1 and store it in a map.
    Now, for each element of array 2, check if the element is found in the map.
    If it is present, print the number k times, where k is the frequency of appearance of the element.
    After printing, remove the element from the map.
    After all the array 2 elements have been traversed, sort the remaining elements and print them.


Program to sort elements according to the order specified by another array using hashing is given below.


C++
1

// C++ program to sort an array according to the order specified by another array using hashing

2

​

3

#include <bits/stdc++.h>

4

using namespace std;

5

​

6

void customSort(int arr1[], int arr2[], int m, int n)

7

{

8

// map to store frequency of each element of first array

9

unordered_map<int, int> freq;

10

​

11

for (int i = 0; i < m; i++)

12

freq[arr1[i]]++;

13

​

14

int index = 0;

15

// do for every element of second array

16

for (int i = 0; i < n; i++)

17

{

18

// If current element is present in the map, print it n times

19

while (freq[arr2[i]])

20

{

21

arr1[index++] = arr2[i];

22

freq[arr2[i]]–;

23

}

24

// delete the element from map

25

freq.erase(arr2[i]);

26

}

27

​

28

// sort the remaining elements present in the map

29

int i = index;

30

for (auto it = freq.begin(); it != freq.end(); ++it)

31

while (it->second–)

32

arr1[index++] = (it->first);

33

​

34

// sort the remaining elements

35

sort(arr1 + i, arr1 + index);

36

}

37

​

38

// main function

39

int main()

40

{

41

int arr1[] = { 1, 2, 3, 4, 3, 1, 2, 5, 7};

42

int arr2[] = { 3, 2, 4, 1};

43

​

44

int m = sizeof(arr1) / sizeof(arr1[0]);

45

int n = sizeof(arr2) / sizeof(arr2[0]);

46

​

47

customSort(arr1, arr2, m, n);

48

​

49

cout << “After sorting the array is : “;

50

for (int i = 0; i < m; i++)

51

cout << arr1[i] << ” “;

52

cout << endl;

53

​

54

return 0;

55

}


Output
Enter the size of array 1 : 8
Enter the size of array 2 : 3
Input the array 1 elements : 1 2 3 4 1 2 3 9
Input the array 2 elements : 1 2 3
The Sorted array : 1 1 2 2 3 3 4 9


Time complexity: O(mlogm + n)
