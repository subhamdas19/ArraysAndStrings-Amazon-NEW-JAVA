https://www.geeksforgeeks.org/find-common-element-rows-row-wise-sorted-matrix/
A Hashing Based Solution 
// Java implementation of the approach
import java.util.*;

class GFG
{

// Specify number of rows and columns
static int M = 4;
static int N = 5;

// Returns common element in all rows of mat[M][N].
// If there is no common element, then -1 is returned
static int findCommon(int mat[][])
{
	// A hash map to store count of elements
	HashMap<Integer,
			Integer> cnt = new HashMap<Integer,
									Integer>();

	int i, j;

	for (i = 0; i < M; i++)
	{

		// Increment the count of first
		// element of the row
		if(cnt.containsKey(mat[i][0]))
		{
			cnt.put(mat[i][0],
			cnt.get(mat[i][0]) + 1);
		}
		else
		{
			cnt.put(mat[i][0], 1);
		}

		// Starting from the second element
		// of the current row
		for (j = 1; j < N; j++)
		{

			// If current element is different from
			// the previous element i.e. it is appearing
			// for the first time in the current row
			if (mat[i][j] != mat[i][j - 1])
				if(cnt.containsKey(mat[i][j]))
				{
					cnt.put(mat[i][j],
					cnt.get(mat[i][j]) + 1);
				}
				else
				{
					cnt.put(mat[i][j], 1);
				}
		}
	}

	// Find element having count
	// equal to number of rows
	for (Map.Entry<Integer,
				Integer> ele : cnt.entrySet())
	{
		if (ele.getValue() == M)
			return ele.getKey();
	}

	// No such element found
	return -1;
}

// Driver Code
public static void main(String[] args)
{
	int mat[][] = {{ 1, 2, 3, 4, 5 },
				{ 2, 4, 5, 8, 10 },
				{ 3, 5, 7, 9, 11 },
				{ 1, 3, 5, 7, 9 }};
	int result = findCommon(mat);
	if (result == -1)
		System.out.println("No common element");
	else
		System.out.println("Common element is " + result);
	}
}

// This code is contributed by Rajput-Ji
